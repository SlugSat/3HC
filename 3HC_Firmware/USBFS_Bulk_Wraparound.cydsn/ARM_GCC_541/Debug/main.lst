ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer,64,4
  20              		.section	.text.main,"ax",%progbits
  21              		.align	2
  22              		.global	main
  23              		.thumb
  24              		.thumb_func
  25              		.type	main, %function
  26              	main:
  27              	.LFB63:
  28              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 3.0
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *  This example project demonstrates how to establish communication between 
   8:main.c        **** *  the PC and Vendor-Specific USB device. The device has two endpoints: 
   9:main.c        **** *  BULK IN and BULK OUT. The OUT endpoint allows the host to write data into 
  10:main.c        **** *  the device and the IN endpoint allows the host to read data from the device. 
  11:main.c        **** *  The data received in the OUT endpoint is looped back to the IN endpoint.
  12:main.c        **** *
  13:main.c        **** ********************************************************************************
  14:main.c        **** * Copyright 2015, Cypress Semiconductor Corporation. All rights reserved.
  15:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  16:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  17:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  18:main.c        **** * accompanying the software package from which you obtained this software.
  19:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  20:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  21:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <project.h>
  25:main.c        **** 
  26:main.c        **** /* USB device number. */
  27:main.c        **** #define USBFS_DEVICE  (0u)
  28:main.c        **** 
  29:main.c        **** /* Active endpoints of USB device. */
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 2


  30:main.c        **** #define IN_EP_NUM     (1u)
  31:main.c        **** #define OUT_EP_NUM    (2u)
  32:main.c        **** 
  33:main.c        **** /* Size of SRAM buffer to store endpoint data. */
  34:main.c        **** #define BUFFER_SIZE   (64u)
  35:main.c        **** 
  36:main.c        **** #if (USBFS_16BITS_EP_ACCESS_ENABLE)
  37:main.c        ****     /* To use the 16-bit APIs, the buffer has to be:
  38:main.c        ****     *  1. The buffer size must be multiple of 2 (when endpoint size is odd).
  39:main.c        ****     *     For example: the endpoint size is 63, the buffer size must be 64.
  40:main.c        ****     *  2. The buffer has to be aligned to 2 bytes boundary to not cause exception
  41:main.c        ****     *     while 16-bit access.
  42:main.c        ****     */
  43:main.c        ****     #ifdef CY_ALIGN
  44:main.c        ****         /* Compiler supports alignment attribute: __ARMCC_VERSION and __GNUC__ */
  45:main.c        ****         CY_ALIGN(2) uint8 buffer[BUFFER_SIZE];
  46:main.c        ****     #else
  47:main.c        ****         /* Complier uses pragma for alignment: __ICCARM__ */
  48:main.c        ****         #pragma data_alignment = 2
  49:main.c        ****         uint8 buffer[BUFFER_SIZE];
  50:main.c        ****     #endif /* (CY_ALIGN) */
  51:main.c        **** #else
  52:main.c        ****     /* There are no specific requirements to the buffer size and alignment for 
  53:main.c        ****     * the 8-bit APIs usage.
  54:main.c        ****     */
  55:main.c        ****     uint8 buffer[BUFFER_SIZE];
  56:main.c        **** #endif /* (USBFS_GEN_16BITS_EP_ACCESS) */
  57:main.c        **** 
  58:main.c        **** 
  59:main.c        **** /*******************************************************************************
  60:main.c        **** * Function Name: main
  61:main.c        **** ********************************************************************************
  62:main.c        **** *
  63:main.c        **** * Summary:
  64:main.c        **** *  The main function performs the following actions:
  65:main.c        **** *   1. Starts the USBFS component.
  66:main.c        **** *   2. Waits until the device is enumerated by the host.
  67:main.c        **** *   3. Enables the OUT endpoint to start communication with the host.
  68:main.c        **** *   4. Waits for OUT data coming from the host and sends it back on a
  69:main.c        **** *      subsequent IN request.
  70:main.c        **** *
  71:main.c        **** * Parameters:
  72:main.c        **** *  None.
  73:main.c        **** *
  74:main.c        **** * Return:
  75:main.c        **** *  None.
  76:main.c        **** *
  77:main.c        **** *******************************************************************************/
  78:main.c        **** int main()
  79:main.c        **** {
  29              		.loc 1 79 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 3


  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  80:main.c        ****     uint16 length;
  81:main.c        **** 
  82:main.c        ****     CyGlobalIntEnable;
  41              		.loc 1 82 0
  42              		.syntax unified
  43              	@ 82 "main.c" 1
  44 0006 62B6     		CPSIE   i
  45              	@ 0 "" 2
  83:main.c        **** 
  84:main.c        ****     /* Start USBFS operation with 5V operation. */
  85:main.c        ****     USBFS_Start(USBFS_DEVICE, USBFS_5V_OPERATION);
  46              		.loc 1 85 0
  47              		.thumb
  48              		.syntax unified
  49 0008 0121     		movs	r1, #1
  50 000a 0020     		movs	r0, #0
  51 000c FFF7FEFF 		bl	USBFS_Start
  86:main.c        **** 
  87:main.c        ****     /* Wait until device is enumerated by host. */
  88:main.c        ****     while (0u == USBFS_GetConfiguration())
  52              		.loc 1 88 0
  53 0010 00BF     		nop
  54              	.L2:
  55              		.loc 1 88 0 is_stmt 0 discriminator 1
  56 0012 FFF7FEFF 		bl	USBFS_GetConfiguration
  57 0016 0346     		mov	r3, r0
  58 0018 002B     		cmp	r3, #0
  59 001a FAD0     		beq	.L2
  89:main.c        ****     {
  90:main.c        ****     }
  91:main.c        **** 
  92:main.c        ****     /* Enable OUT endpoint to receive data from host. */
  93:main.c        ****     USBFS_EnableOutEP(OUT_EP_NUM);
  60              		.loc 1 93 0 is_stmt 1
  61 001c 0220     		movs	r0, #2
  62 001e FFF7FEFF 		bl	USBFS_EnableOutEP
  63              	.L7:
  94:main.c        **** 
  95:main.c        ****     for(;;)
  96:main.c        ****     {
  97:main.c        ****         /* Check if configuration is changed. */
  98:main.c        ****         if (0u != USBFS_IsConfigurationChanged())
  64              		.loc 1 98 0
  65 0022 FFF7FEFF 		bl	USBFS_IsConfigurationChanged
  66 0026 0346     		mov	r3, r0
  67 0028 002B     		cmp	r3, #0
  68 002a 07D0     		beq	.L3
  99:main.c        ****         {
 100:main.c        ****             /* Re-enable endpoint when device is configured. */
 101:main.c        ****             if (0u != USBFS_GetConfiguration())
  69              		.loc 1 101 0
  70 002c FFF7FEFF 		bl	USBFS_GetConfiguration
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 4


  71 0030 0346     		mov	r3, r0
  72 0032 002B     		cmp	r3, #0
  73 0034 02D0     		beq	.L3
 102:main.c        ****             {
 103:main.c        ****                 /* Enable OUT endpoint to receive data from host. */
 104:main.c        ****                 USBFS_EnableOutEP(OUT_EP_NUM);
  74              		.loc 1 104 0
  75 0036 0220     		movs	r0, #2
  76 0038 FFF7FEFF 		bl	USBFS_EnableOutEP
  77              	.L3:
 105:main.c        ****             }
 106:main.c        ****         }
 107:main.c        **** 
 108:main.c        ****         /* Check if data was received. */
 109:main.c        ****         if (USBFS_OUT_BUFFER_FULL == USBFS_GetEPState(OUT_EP_NUM))
  78              		.loc 1 109 0
  79 003c 0220     		movs	r0, #2
  80 003e FFF7FEFF 		bl	USBFS_GetEPState
  81 0042 0346     		mov	r3, r0
  82 0044 012B     		cmp	r3, #1
  83 0046 ECD1     		bne	.L7
 110:main.c        ****         {
 111:main.c        ****             /* Read number of received data bytes. */
 112:main.c        ****             length = USBFS_GetEPCount(OUT_EP_NUM);
  84              		.loc 1 112 0
  85 0048 0220     		movs	r0, #2
  86 004a FFF7FEFF 		bl	USBFS_GetEPCount
  87 004e 0346     		mov	r3, r0
  88 0050 FB80     		strh	r3, [r7, #6]	@ movhi
 113:main.c        **** 
 114:main.c        ****             /* Trigger DMA to copy data from OUT endpoint buffer. */
 115:main.c        ****         #if (USBFS_16BITS_EP_ACCESS_ENABLE)
 116:main.c        ****             USBFS_ReadOutEP16(OUT_EP_NUM, buffer, length);
 117:main.c        ****         #else
 118:main.c        ****             USBFS_ReadOutEP(OUT_EP_NUM, buffer, length);
  89              		.loc 1 118 0
  90 0052 FB88     		ldrh	r3, [r7, #6]
  91 0054 1A46     		mov	r2, r3
  92 0056 0E49     		ldr	r1, .L8
  93 0058 0220     		movs	r0, #2
  94 005a FFF7FEFF 		bl	USBFS_ReadOutEP
 119:main.c        ****         #endif /* (USBFS_GEN_16BITS_EP_ACCESS) */
 120:main.c        **** 
 121:main.c        ****             /* Wait until DMA completes copying data from OUT endpoint buffer. */
 122:main.c        ****             while (USBFS_OUT_BUFFER_FULL == USBFS_GetEPState(OUT_EP_NUM))
  95              		.loc 1 122 0
  96 005e 00BF     		nop
  97              	.L5:
  98              		.loc 1 122 0 is_stmt 0 discriminator 1
  99 0060 0220     		movs	r0, #2
 100 0062 FFF7FEFF 		bl	USBFS_GetEPState
 101 0066 0346     		mov	r3, r0
 102 0068 012B     		cmp	r3, #1
 103 006a F9D0     		beq	.L5
 123:main.c        ****             {
 124:main.c        ****             }
 125:main.c        ****             
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 5


 126:main.c        ****             /* Enable OUT endpoint to receive data from host. */
 127:main.c        ****             USBFS_EnableOutEP(OUT_EP_NUM);
 104              		.loc 1 127 0 is_stmt 1
 105 006c 0220     		movs	r0, #2
 106 006e FFF7FEFF 		bl	USBFS_EnableOutEP
 128:main.c        **** 
 129:main.c        ****             /* Wait until IN buffer becomes empty (host has read data). */
 130:main.c        ****             while (USBFS_IN_BUFFER_EMPTY != USBFS_GetEPState(IN_EP_NUM))
 107              		.loc 1 130 0
 108 0072 00BF     		nop
 109              	.L6:
 110              		.loc 1 130 0 is_stmt 0 discriminator 1
 111 0074 0120     		movs	r0, #1
 112 0076 FFF7FEFF 		bl	USBFS_GetEPState
 113 007a 0346     		mov	r3, r0
 114 007c 012B     		cmp	r3, #1
 115 007e F9D1     		bne	.L6
 131:main.c        ****             {
 132:main.c        ****             }
 133:main.c        **** 
 134:main.c        ****         /* Trigger DMA to copy data into IN endpoint buffer.
 135:main.c        ****         * After data has been copied, IN endpoint is ready to be read by the
 136:main.c        ****         * host.
 137:main.c        ****         */
 138:main.c        ****         #if (USBFS_16BITS_EP_ACCESS_ENABLE)
 139:main.c        ****             USBFS_LoadInEP16(IN_EP_NUM, buffer, length);
 140:main.c        ****         #else
 141:main.c        ****             USBFS_LoadInEP(IN_EP_NUM, buffer, length);
 116              		.loc 1 141 0 is_stmt 1
 117 0080 FB88     		ldrh	r3, [r7, #6]
 118 0082 1A46     		mov	r2, r3
 119 0084 0249     		ldr	r1, .L8
 120 0086 0120     		movs	r0, #1
 121 0088 FFF7FEFF 		bl	USBFS_LoadInEP
 142:main.c        ****         #endif /* (USBFS_GEN_16BITS_EP_ACCESS) */
 143:main.c        ****         }
 144:main.c        ****     }
 122              		.loc 1 144 0
 123 008c C9E7     		b	.L7
 124              	.L9:
 125 008e 00BF     		.align	2
 126              	.L8:
 127 0090 00000000 		.word	buffer
 128              		.cfi_endproc
 129              	.LFE63:
 130              		.size	main, .-main
 131              		.text
 132              	.Letext0:
 133              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 134              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 135              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 136              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 137              		.section	.debug_info,"",%progbits
 138              	.Ldebug_info0:
 139 0000 13010000 		.4byte	0x113
 140 0004 0400     		.2byte	0x4
 141 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 6


 142 000a 04       		.byte	0x4
 143 000b 01       		.uleb128 0x1
 144 000c 70000000 		.4byte	.LASF20
 145 0010 0C       		.byte	0xc
 146 0011 2E000000 		.4byte	.LASF21
 147 0015 0C010000 		.4byte	.LASF22
 148 0019 00000000 		.4byte	.Ldebug_ranges0+0
 149 001d 00000000 		.4byte	0
 150 0021 00000000 		.4byte	.Ldebug_line0
 151 0025 02       		.uleb128 0x2
 152 0026 01       		.byte	0x1
 153 0027 06       		.byte	0x6
 154 0028 82010000 		.4byte	.LASF0
 155 002c 02       		.uleb128 0x2
 156 002d 01       		.byte	0x1
 157 002e 08       		.byte	0x8
 158 002f FE000000 		.4byte	.LASF1
 159 0033 02       		.uleb128 0x2
 160 0034 02       		.byte	0x2
 161 0035 05       		.byte	0x5
 162 0036 AA010000 		.4byte	.LASF2
 163 003a 02       		.uleb128 0x2
 164 003b 02       		.byte	0x2
 165 003c 07       		.byte	0x7
 166 003d 0E000000 		.4byte	.LASF3
 167 0041 03       		.uleb128 0x3
 168 0042 9A010000 		.4byte	.LASF9
 169 0046 02       		.byte	0x2
 170 0047 3F       		.byte	0x3f
 171 0048 4C000000 		.4byte	0x4c
 172 004c 02       		.uleb128 0x2
 173 004d 04       		.byte	0x4
 174 004e 05       		.byte	0x5
 175 004f 65010000 		.4byte	.LASF4
 176 0053 02       		.uleb128 0x2
 177 0054 04       		.byte	0x4
 178 0055 07       		.byte	0x7
 179 0056 47000000 		.4byte	.LASF5
 180 005a 02       		.uleb128 0x2
 181 005b 08       		.byte	0x8
 182 005c 05       		.byte	0x5
 183 005d 00000000 		.4byte	.LASF6
 184 0061 02       		.uleb128 0x2
 185 0062 08       		.byte	0x8
 186 0063 07       		.byte	0x7
 187 0064 59000000 		.4byte	.LASF7
 188 0068 04       		.uleb128 0x4
 189 0069 04       		.byte	0x4
 190 006a 05       		.byte	0x5
 191 006b 696E7400 		.ascii	"int\000"
 192 006f 02       		.uleb128 0x2
 193 0070 04       		.byte	0x4
 194 0071 07       		.byte	0x7
 195 0072 21000000 		.4byte	.LASF8
 196 0076 03       		.uleb128 0x3
 197 0077 BB010000 		.4byte	.LASF10
 198 007b 03       		.byte	0x3
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 7


 199 007c 2C       		.byte	0x2c
 200 007d 41000000 		.4byte	0x41
 201 0081 05       		.uleb128 0x5
 202 0082 41000000 		.4byte	.LASF11
 203 0086 04       		.byte	0x4
 204 0087 9201     		.2byte	0x192
 205 0089 2C000000 		.4byte	0x2c
 206 008d 05       		.uleb128 0x5
 207 008e B4010000 		.4byte	.LASF12
 208 0092 04       		.byte	0x4
 209 0093 9301     		.2byte	0x193
 210 0095 3A000000 		.4byte	0x3a
 211 0099 02       		.uleb128 0x2
 212 009a 04       		.byte	0x4
 213 009b 04       		.byte	0x4
 214 009c A4010000 		.4byte	.LASF13
 215 00a0 02       		.uleb128 0x2
 216 00a1 08       		.byte	0x8
 217 00a2 04       		.byte	0x4
 218 00a3 6E010000 		.4byte	.LASF14
 219 00a7 02       		.uleb128 0x2
 220 00a8 01       		.byte	0x1
 221 00a9 08       		.byte	0x8
 222 00aa 60010000 		.4byte	.LASF15
 223 00ae 02       		.uleb128 0x2
 224 00af 08       		.byte	0x8
 225 00b0 04       		.byte	0x4
 226 00b1 8E010000 		.4byte	.LASF16
 227 00b5 02       		.uleb128 0x2
 228 00b6 04       		.byte	0x4
 229 00b7 07       		.byte	0x7
 230 00b8 CA010000 		.4byte	.LASF17
 231 00bc 06       		.uleb128 0x6
 232 00bd 35000000 		.4byte	.LASF23
 233 00c1 01       		.byte	0x1
 234 00c2 4E       		.byte	0x4e
 235 00c3 68000000 		.4byte	0x68
 236 00c7 00000000 		.4byte	.LFB63
 237 00cb 94000000 		.4byte	.LFE63-.LFB63
 238 00cf 01       		.uleb128 0x1
 239 00d0 9C       		.byte	0x9c
 240 00d1 E4000000 		.4byte	0xe4
 241 00d5 07       		.uleb128 0x7
 242 00d6 3A000000 		.4byte	.LASF24
 243 00da 01       		.byte	0x1
 244 00db 50       		.byte	0x50
 245 00dc 8D000000 		.4byte	0x8d
 246 00e0 02       		.uleb128 0x2
 247 00e1 91       		.byte	0x91
 248 00e2 76       		.sleb128 -10
 249 00e3 00       		.byte	0
 250 00e4 08       		.uleb128 0x8
 251 00e5 75010000 		.4byte	.LASF18
 252 00e9 05       		.byte	0x5
 253 00ea 1207     		.2byte	0x712
 254 00ec F0000000 		.4byte	0xf0
 255 00f0 09       		.uleb128 0x9
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 8


 256 00f1 76000000 		.4byte	0x76
 257 00f5 0A       		.uleb128 0xa
 258 00f6 81000000 		.4byte	0x81
 259 00fa 05010000 		.4byte	0x105
 260 00fe 0B       		.uleb128 0xb
 261 00ff B5000000 		.4byte	0xb5
 262 0103 3F       		.byte	0x3f
 263 0104 00       		.byte	0
 264 0105 0C       		.uleb128 0xc
 265 0106 C3010000 		.4byte	.LASF19
 266 010a 01       		.byte	0x1
 267 010b 37       		.byte	0x37
 268 010c F5000000 		.4byte	0xf5
 269 0110 05       		.uleb128 0x5
 270 0111 03       		.byte	0x3
 271 0112 00000000 		.4byte	buffer
 272 0116 00       		.byte	0
 273              		.section	.debug_abbrev,"",%progbits
 274              	.Ldebug_abbrev0:
 275 0000 01       		.uleb128 0x1
 276 0001 11       		.uleb128 0x11
 277 0002 01       		.byte	0x1
 278 0003 25       		.uleb128 0x25
 279 0004 0E       		.uleb128 0xe
 280 0005 13       		.uleb128 0x13
 281 0006 0B       		.uleb128 0xb
 282 0007 03       		.uleb128 0x3
 283 0008 0E       		.uleb128 0xe
 284 0009 1B       		.uleb128 0x1b
 285 000a 0E       		.uleb128 0xe
 286 000b 55       		.uleb128 0x55
 287 000c 17       		.uleb128 0x17
 288 000d 11       		.uleb128 0x11
 289 000e 01       		.uleb128 0x1
 290 000f 10       		.uleb128 0x10
 291 0010 17       		.uleb128 0x17
 292 0011 00       		.byte	0
 293 0012 00       		.byte	0
 294 0013 02       		.uleb128 0x2
 295 0014 24       		.uleb128 0x24
 296 0015 00       		.byte	0
 297 0016 0B       		.uleb128 0xb
 298 0017 0B       		.uleb128 0xb
 299 0018 3E       		.uleb128 0x3e
 300 0019 0B       		.uleb128 0xb
 301 001a 03       		.uleb128 0x3
 302 001b 0E       		.uleb128 0xe
 303 001c 00       		.byte	0
 304 001d 00       		.byte	0
 305 001e 03       		.uleb128 0x3
 306 001f 16       		.uleb128 0x16
 307 0020 00       		.byte	0
 308 0021 03       		.uleb128 0x3
 309 0022 0E       		.uleb128 0xe
 310 0023 3A       		.uleb128 0x3a
 311 0024 0B       		.uleb128 0xb
 312 0025 3B       		.uleb128 0x3b
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 9


 313 0026 0B       		.uleb128 0xb
 314 0027 49       		.uleb128 0x49
 315 0028 13       		.uleb128 0x13
 316 0029 00       		.byte	0
 317 002a 00       		.byte	0
 318 002b 04       		.uleb128 0x4
 319 002c 24       		.uleb128 0x24
 320 002d 00       		.byte	0
 321 002e 0B       		.uleb128 0xb
 322 002f 0B       		.uleb128 0xb
 323 0030 3E       		.uleb128 0x3e
 324 0031 0B       		.uleb128 0xb
 325 0032 03       		.uleb128 0x3
 326 0033 08       		.uleb128 0x8
 327 0034 00       		.byte	0
 328 0035 00       		.byte	0
 329 0036 05       		.uleb128 0x5
 330 0037 16       		.uleb128 0x16
 331 0038 00       		.byte	0
 332 0039 03       		.uleb128 0x3
 333 003a 0E       		.uleb128 0xe
 334 003b 3A       		.uleb128 0x3a
 335 003c 0B       		.uleb128 0xb
 336 003d 3B       		.uleb128 0x3b
 337 003e 05       		.uleb128 0x5
 338 003f 49       		.uleb128 0x49
 339 0040 13       		.uleb128 0x13
 340 0041 00       		.byte	0
 341 0042 00       		.byte	0
 342 0043 06       		.uleb128 0x6
 343 0044 2E       		.uleb128 0x2e
 344 0045 01       		.byte	0x1
 345 0046 3F       		.uleb128 0x3f
 346 0047 19       		.uleb128 0x19
 347 0048 03       		.uleb128 0x3
 348 0049 0E       		.uleb128 0xe
 349 004a 3A       		.uleb128 0x3a
 350 004b 0B       		.uleb128 0xb
 351 004c 3B       		.uleb128 0x3b
 352 004d 0B       		.uleb128 0xb
 353 004e 49       		.uleb128 0x49
 354 004f 13       		.uleb128 0x13
 355 0050 11       		.uleb128 0x11
 356 0051 01       		.uleb128 0x1
 357 0052 12       		.uleb128 0x12
 358 0053 06       		.uleb128 0x6
 359 0054 40       		.uleb128 0x40
 360 0055 18       		.uleb128 0x18
 361 0056 9642     		.uleb128 0x2116
 362 0058 19       		.uleb128 0x19
 363 0059 01       		.uleb128 0x1
 364 005a 13       		.uleb128 0x13
 365 005b 00       		.byte	0
 366 005c 00       		.byte	0
 367 005d 07       		.uleb128 0x7
 368 005e 34       		.uleb128 0x34
 369 005f 00       		.byte	0
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 10


 370 0060 03       		.uleb128 0x3
 371 0061 0E       		.uleb128 0xe
 372 0062 3A       		.uleb128 0x3a
 373 0063 0B       		.uleb128 0xb
 374 0064 3B       		.uleb128 0x3b
 375 0065 0B       		.uleb128 0xb
 376 0066 49       		.uleb128 0x49
 377 0067 13       		.uleb128 0x13
 378 0068 02       		.uleb128 0x2
 379 0069 18       		.uleb128 0x18
 380 006a 00       		.byte	0
 381 006b 00       		.byte	0
 382 006c 08       		.uleb128 0x8
 383 006d 34       		.uleb128 0x34
 384 006e 00       		.byte	0
 385 006f 03       		.uleb128 0x3
 386 0070 0E       		.uleb128 0xe
 387 0071 3A       		.uleb128 0x3a
 388 0072 0B       		.uleb128 0xb
 389 0073 3B       		.uleb128 0x3b
 390 0074 05       		.uleb128 0x5
 391 0075 49       		.uleb128 0x49
 392 0076 13       		.uleb128 0x13
 393 0077 3F       		.uleb128 0x3f
 394 0078 19       		.uleb128 0x19
 395 0079 3C       		.uleb128 0x3c
 396 007a 19       		.uleb128 0x19
 397 007b 00       		.byte	0
 398 007c 00       		.byte	0
 399 007d 09       		.uleb128 0x9
 400 007e 35       		.uleb128 0x35
 401 007f 00       		.byte	0
 402 0080 49       		.uleb128 0x49
 403 0081 13       		.uleb128 0x13
 404 0082 00       		.byte	0
 405 0083 00       		.byte	0
 406 0084 0A       		.uleb128 0xa
 407 0085 01       		.uleb128 0x1
 408 0086 01       		.byte	0x1
 409 0087 49       		.uleb128 0x49
 410 0088 13       		.uleb128 0x13
 411 0089 01       		.uleb128 0x1
 412 008a 13       		.uleb128 0x13
 413 008b 00       		.byte	0
 414 008c 00       		.byte	0
 415 008d 0B       		.uleb128 0xb
 416 008e 21       		.uleb128 0x21
 417 008f 00       		.byte	0
 418 0090 49       		.uleb128 0x49
 419 0091 13       		.uleb128 0x13
 420 0092 2F       		.uleb128 0x2f
 421 0093 0B       		.uleb128 0xb
 422 0094 00       		.byte	0
 423 0095 00       		.byte	0
 424 0096 0C       		.uleb128 0xc
 425 0097 34       		.uleb128 0x34
 426 0098 00       		.byte	0
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 11


 427 0099 03       		.uleb128 0x3
 428 009a 0E       		.uleb128 0xe
 429 009b 3A       		.uleb128 0x3a
 430 009c 0B       		.uleb128 0xb
 431 009d 3B       		.uleb128 0x3b
 432 009e 0B       		.uleb128 0xb
 433 009f 49       		.uleb128 0x49
 434 00a0 13       		.uleb128 0x13
 435 00a1 3F       		.uleb128 0x3f
 436 00a2 19       		.uleb128 0x19
 437 00a3 02       		.uleb128 0x2
 438 00a4 18       		.uleb128 0x18
 439 00a5 00       		.byte	0
 440 00a6 00       		.byte	0
 441 00a7 00       		.byte	0
 442              		.section	.debug_aranges,"",%progbits
 443 0000 1C000000 		.4byte	0x1c
 444 0004 0200     		.2byte	0x2
 445 0006 00000000 		.4byte	.Ldebug_info0
 446 000a 04       		.byte	0x4
 447 000b 00       		.byte	0
 448 000c 0000     		.2byte	0
 449 000e 0000     		.2byte	0
 450 0010 00000000 		.4byte	.LFB63
 451 0014 94000000 		.4byte	.LFE63-.LFB63
 452 0018 00000000 		.4byte	0
 453 001c 00000000 		.4byte	0
 454              		.section	.debug_ranges,"",%progbits
 455              	.Ldebug_ranges0:
 456 0000 00000000 		.4byte	.LFB63
 457 0004 94000000 		.4byte	.LFE63
 458 0008 00000000 		.4byte	0
 459 000c 00000000 		.4byte	0
 460              		.section	.debug_line,"",%progbits
 461              	.Ldebug_line0:
 462 0000 88010000 		.section	.debug_str,"MS",%progbits,1
 462      02004C01 
 462      00000201 
 462      FB0E0D00 
 462      01010101 
 463              	.LASF6:
 464 0000 6C6F6E67 		.ascii	"long long int\000"
 464      206C6F6E 
 464      6720696E 
 464      7400
 465              	.LASF3:
 466 000e 73686F72 		.ascii	"short unsigned int\000"
 466      7420756E 
 466      7369676E 
 466      65642069 
 466      6E7400
 467              	.LASF8:
 468 0021 756E7369 		.ascii	"unsigned int\000"
 468      676E6564 
 468      20696E74 
 468      00
 469              	.LASF21:
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 12


 470 002e 6D61696E 		.ascii	"main.c\000"
 470      2E6300
 471              	.LASF23:
 472 0035 6D61696E 		.ascii	"main\000"
 472      00
 473              	.LASF24:
 474 003a 6C656E67 		.ascii	"length\000"
 474      746800
 475              	.LASF11:
 476 0041 75696E74 		.ascii	"uint8\000"
 476      3800
 477              	.LASF5:
 478 0047 6C6F6E67 		.ascii	"long unsigned int\000"
 478      20756E73 
 478      69676E65 
 478      6420696E 
 478      7400
 479              	.LASF7:
 480 0059 6C6F6E67 		.ascii	"long long unsigned int\000"
 480      206C6F6E 
 480      6720756E 
 480      7369676E 
 480      65642069 
 481              	.LASF20:
 482 0070 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 482      43313120 
 482      352E342E 
 482      31203230 
 482      31363036 
 483 00a3 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 483      20726576 
 483      6973696F 
 483      6E203233 
 483      37373135 
 484 00d6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 484      66756E63 
 484      74696F6E 
 484      2D736563 
 484      74696F6E 
 485              	.LASF1:
 486 00fe 756E7369 		.ascii	"unsigned char\000"
 486      676E6564 
 486      20636861 
 486      7200
 487              	.LASF22:
 488 010c 433A5C55 		.ascii	"C:\\Users\\Caleb Cotter\\Documents\\GitHub\\3HC\\3H"
 488      73657273 
 488      5C43616C 
 488      65622043 
 488      6F747465 
 489 0139 435F4669 		.ascii	"C_Firmware\\USBFS_Bulk_Wraparound.cydsn\000"
 489      726D7761 
 489      72655C55 
 489      53424653 
 489      5F42756C 
 490              	.LASF15:
 491 0160 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\CALEBC~1\AppData\Local\Temp\ccfN7fXH.s 			page 13


 491      00
 492              	.LASF4:
 493 0165 6C6F6E67 		.ascii	"long int\000"
 493      20696E74 
 493      00
 494              	.LASF14:
 495 016e 646F7562 		.ascii	"double\000"
 495      6C6500
 496              	.LASF18:
 497 0175 49544D5F 		.ascii	"ITM_RxBuffer\000"
 497      52784275 
 497      66666572 
 497      00
 498              	.LASF0:
 499 0182 7369676E 		.ascii	"signed char\000"
 499      65642063 
 499      68617200 
 500              	.LASF16:
 501 018e 6C6F6E67 		.ascii	"long double\000"
 501      20646F75 
 501      626C6500 
 502              	.LASF9:
 503 019a 5F5F696E 		.ascii	"__int32_t\000"
 503      7433325F 
 503      7400
 504              	.LASF13:
 505 01a4 666C6F61 		.ascii	"float\000"
 505      7400
 506              	.LASF2:
 507 01aa 73686F72 		.ascii	"short int\000"
 507      7420696E 
 507      7400
 508              	.LASF12:
 509 01b4 75696E74 		.ascii	"uint16\000"
 509      313600
 510              	.LASF10:
 511 01bb 696E7433 		.ascii	"int32_t\000"
 511      325F7400 
 512              	.LASF19:
 513 01c3 62756666 		.ascii	"buffer\000"
 513      657200
 514              	.LASF17:
 515 01ca 73697A65 		.ascii	"sizetype\000"
 515      74797065 
 515      00
 516              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
